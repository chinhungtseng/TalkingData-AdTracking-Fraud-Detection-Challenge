filter(dense_rank(desc(count)) <= 10) %>%
ggplot(mapping = aes(x = reorder(os, desc(count)), y = count, fill = os)) +
geom_bar(stat = 'identity')
# Disconnect from Spark
spark_disconnect(sc)
# Reference:
# https://plot.ly/r/getting-started/#initialization-for-online-plotting
# https://plotly-book.cpsievert.me/index.html
# What is plotly
## Plotly is an R package for creating interactive web-based graphs via the open source
## JavaScript graphing library plotly.js. As of version 2.0 (November 17, 2015),
## Plotly graphs are rendered locally through the htmlwidgets framework.
# The official website: If we choose Community plan, there are 25 Public Charts Support.
## https://plot.ly/settings/subscription
# 1. Install plotly Package...
if(!require('plotly')) install.packages('plotly')
library(plotly)
# 2-1. Initialization for Offline Plotting
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
# 2-2. Initialization for Online Plotting
## 2-2-1. Create a free Plotly account: https://plot.ly/api_signup
## 2-2-2. ave your authentication credentials: https://plot.ly/settings/api
## Find your authentication API keys in your online settings. Set them in your R session with:
## Sys.setenv("plotly_username"="your_plotly_username")
## Sys.setenv("plotly_api_key"="your_api_key")
## This is my plotly's setting
Sys.setenv("plotly_username"="chinhungtseng")
Sys.setenv("plotly_api_key"="TeC8zB9fWnyHm6z1aHv2")
# 3. Publish your graphs to Plotly with api_create
# Use filename to title the file in your Plotly account.
# api_create(p, filename = "r-docs-midwest-boxplots")
api_create(p, filename = "r-docs-midwest-boxplots")
# 4. (optional) - Suppress auto open
# When following the instructions above, api_create(p) will auto open the created URL in the browser.
# To suppress this behavior, you can update your browser options in R:
options(browser = 'false')
# ---------------------------------------------------------------------
# Load libraries
if(!require(tidyverse)) install.packages('tidyverse')
if(!require(lubridate)) install.packages('lubridate')
library(tidyverse)
library(lubridate)
# Disable e notation
options(scipen = 999)
# Set file's path: you can set your path here.
path <- 'data/'
# Load dataset and count the loading time
## train.csv
system.time({
train <- data.table::fread(input = paste(path, 'train_sample.csv', sep = ''),
header = TRUE,
sep = ',')
})
system.time({
train_new <- train %>%
as_tibble() %>%
mutate(
click_time = as.POSIXct(strptime(click_time, "%Y-%m-%d %H:%M:%S")),
attributed_time = as.POSIXct(strptime(attributed_time, "%Y-%m-%d %H:%M:%S")),
ip = as.factor(ip),
is_attributed = is_attributed == 1,
# convert features below to factor property.
ip = as.factor(ip),
app = as.factor(app),
device = as.factor(device),
os = as.factor(os),
channel = as.factor(channel),
# # split date-time
click_day = day(click_time),
click_hour = hour(click_time),
click_minute = minute(click_time),
click_second = second(click_time)
# attr_day = day(attributed_time),
# attr_hour = hour(attributed_time),
# attr_minute = minute(attributed_time),
# attr_second = second(attributed_time)
)
})
# ip_count
ip_count_barchart <- train_new %>%
group_by(ip) %>%
summarise(count = n()) %>%
filter(dense_rank(desc(count)) <= 30) %>%
ggplot(mapping = aes(x = reorder(ip, count), y = count, fill = ip)) +
geom_bar(stat = 'identity', show.legend = FALSE) +
coord_flip()
# Convert original plot to plotly
ip_count_barchart <- ggplotly(ip_count_barchart)
# Create plot API and upload to the official website
api_create(ip_count_barchart, filename = "ip_count_barchart")
train <- data.table::fread(input = paste(path, 'train_sample.csv', sep = ''),
header = TRUE,
sep = ',')
train_new <- train %>%
as_tibble() %>%
mutate(
click_time = as.POSIXct(strptime(click_time, "%Y-%m-%d %H:%M:%S")),
attributed_time = as.POSIXct(strptime(attributed_time, "%Y-%m-%d %H:%M:%S")),
ip = as.factor(ip),
is_attributed = is_attributed == 1,
# convert features below to factor property.
ip = as.factor(ip),
app = as.factor(app),
device = as.factor(device),
os = as.factor(os),
channel = as.factor(channel),
# # split date-time
click_day = day(click_time),
click_hour = hour(click_time),
click_minute = minute(click_time),
click_second = second(click_time)
# attr_day = day(attributed_time),
# attr_hour = hour(attributed_time),
# attr_minute = minute(attributed_time),
# attr_second = second(attributed_time)
)
# Load libraries
if(!require(data.table)) install.packages('data.table')
if(!require(tidyverse)) install.packages('tidyverse')
if(!require(lubridate)) install.packages('lubridate')
library(tidyverse)
library(lubridate)
# Disable e notation
options(scipen = 999)
# Set file's path: you can set your path here.
path <- 'data/'
# Load dataset and count the loading time
## train.csv
system.time({
train <- data.table::fread(input = paste(path, 'train_sample.csv', sep = ''),
header = TRUE,
sep = ',')
})
train_new <- train %>%
as_tibble() %>%
mutate(
click_time = as.POSIXct(strptime(click_time, "%Y-%m-%d %H:%M:%S")),
attributed_time = as.POSIXct(strptime(attributed_time, "%Y-%m-%d %H:%M:%S")),
ip = as.factor(ip),
is_attributed = is_attributed == 1,
# convert features below to factor property.
ip = as.factor(ip),
app = as.factor(app),
device = as.factor(device),
os = as.factor(os),
channel = as.factor(channel),
# # split date-time
click_day = day(click_time),
click_hour = hour(click_time),
click_minute = minute(click_time),
click_second = second(click_time)
# attr_day = day(attributed_time),
# attr_hour = hour(attributed_time),
# attr_minute = minute(attributed_time),
# attr_second = second(attributed_time)
)
ggplot(data = train_new) +
geom_bar(mapping = aes(x = is_attributed, fill = is_attributed))
train_new %>%
ggplot(mapping = aes(x = click_time)) +
geom_freqpoly(mapping = aes(color = is_attributed), bins = 500)
# train.csv:
## ip_count
train_new %>% count(ip) %>% arrange(desc(n))
train_new %>%
group_by(ip) %>%
summarise(count = n()) %>%
filter(dense_rank(desc(count)) <= 30) %>%
ggplot(mapping = aes(x = reorder(ip, count), y = count, fill = ip)) +
geom_bar(stat = 'identity', show.legend = FALSE) +
coord_flip()
## app_count
train_new %>% count(app) %>% arrange(desc(n))
train_new %>%
group_by(app) %>%
summarise(count = n()) %>%
filter(dense_rank(desc(count)) <= 10) %>%
ggplot(mapping = aes(x = reorder(app, desc(count)), y = count, fill = app)) +
geom_bar(stat = 'identity') +
coord_polar()
## device_count
train_new %>% count(device) %>% arrange(desc(n))
train_new %>%
group_by(device) %>%
summarise(count = n()) %>%
filter(dense_rank(desc(count)) <= 10) %>%
ggplot(mapping = aes(x = reorder(device, desc(count)), y = count, fill = device)) +
geom_bar(stat = 'identity')
## os_count
train_new %>% count(os) %>% arrange(desc(n))
train_new %>%
group_by(os) %>%
summarise(count = n()) %>%
filter(dense_rank(desc(count)) <= 10) %>%
ggplot(mapping = aes(x = reorder(os, desc(count)), y = count, fill = os)) +
geom_bar(stat = 'identity') +
coord_polar()
# --------------------------------------------------------
# worse plot...QQ
train_new %>%
group_by(click_day, click_hour) %>%
mutate(
click_count = n(),
click_time = as.factor(as.POSIXct(strptime(click_time, "%Y-%m-%d %H")))
) %>%
ggplot(mapping = aes(x = click_time, y = click_count, color = click_day)) +
geom_bar(stat = 'identity', show.legend = FALSE)
# --------
categorial_var_count <- train_new %>%
summarise(
ip = n_distinct(ip),
app = n_distinct(app),
os = n_distinct(os),
device = n_distinct(device),
channel = n_distinct(channel)
) %>% t() %>% as.tibble()
categorial_var_count$V2 <- c('ip', 'app', 'os', 'device', 'channel')
categorial_var_count$V2 <- as.factor(categorial_var_count$V2)
ggplot(data = categorial_var_count, mapping = aes(x = reorder(V2, V1), y = V1, fill = V2)) +
geom_bar(stat = 'identity') +
coord_cartesian(ylim = c(0, 50))
# --------
ggplot(data = train_new ,mapping = aes(x = ip,  y = stat(count))) +
geom_bar()
# Load libraries
if(!require(data.table)) install.packages('data.table')
if(!require(tidyverse)) install.packages('tidyverse')
if(!require(lubridate)) install.packages('lubridate')
library(tidyverse)
library(lubridate)
# Disable e notation
options(scipen = 999)
# Set file's path: you can set your path here.
path <- 'data/'
# Load dataset and count the loading time
## train.csv
system.time({
train <- data.table::fread(input = paste(path, 'train_sample.csv', sep = ''),
header = TRUE,
sep = ',')
})
## test.csv
# system.time({
#   test <- data.table::fread(input = paste(path, 'test.csv', sep = ''),
#               header = TRUE,
#               sep = ',')
# })
# Quick look up dataset
str(train); # str(test)
# Split click_time and attributed_time to day, hour, minute, second
system.time({
train_new <- train %>%
as_tibble() %>%
mutate(
click_time = as.POSIXct(strptime(click_time, "%Y-%m-%d %H:%M:%S")),
attributed_time = as.POSIXct(strptime(attributed_time, "%Y-%m-%d %H:%M:%S")),
ip = as.factor(ip),
is_attributed = is_attributed == 1,
# convert features below to factor property.
ip = as.factor(ip),
app = as.factor(app),
device = as.factor(device),
os = as.factor(os),
channel = as.factor(channel),
# # split date-time
click_day = day(click_time),
click_hour = hour(click_time),
click_minute = minute(click_time),
click_second = second(click_time)
# attr_day = day(attributed_time),
# attr_hour = hour(attributed_time),
# attr_minute = minute(attributed_time),
# attr_second = second(attributed_time)
)
})
train_new
# ------------------------------------------------------------------------------------
train_new %>%
group_by(id)
?count()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
count(wt = is_attributed)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
count(wt = is_attributed) %>%
arrange(desc(n))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
count(wt = is_attributed) %>%
arrange(desc(n)) %>%
View()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
count(wt = is_attributed) %>%
arrange(desc(n)) %>%
sum()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = count(wt = is_attributed),
num_click_time = count(wt = click_time)
)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = count(wt = is_attributed)
)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_click_time))
## train.csv: count_ip vs is_attributed
train_new %>% count(is_attributed)
# train.csv:
## ip_count
train_new %>% count(ip) %>% arrange(desc(n))
## train.csv: count_ip vs is_attributed
train_new %>% count(is_attributed)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
sum(num_is_attributed)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_click_time))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
filter(num_is_attributed > 0) %>%
arrange(desc(num_click_time))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(num_click_time)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed==1),
num_click_time = n_distinct(click_time)
) %>%
arrange(num_click_time)
)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = n_distinct(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_click_time))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_click_time))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_is_attributed))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_is_attributed)) %>%
View()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(num_is_attributed)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_is_attributed))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_is_attributed)) %>%
cor()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
ip = parse_number(ip),
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
cor()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
parse_number(ip)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
parse_integer(ip)
?parse_number
str(train_new)
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
mutate(ip = parse_number(ip))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
mutate(ip = as.integer(ip))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
mutate(ip = as.integer(ip)) %>%
cor()
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_click_time))
# ------------------------------------------------------------------------------------
train_new %>%
group_by(ip) %>%
summarise(
num_is_attributed = sum(is_attributed),
num_click_time = n_distinct(click_time)
) %>%
arrange(desc(num_is_attributed))
